<!DOCTYPE HTML>
<html><head><meta charset="UTF-8"><title>Mario</title><script type="text/javascript" src="/home/jim/Sandbox/Elm/.cabal-sandbox/share/x86_64-linux-ghc-7.8.2/Elm-0.12/elm-runtime.js"></script><script type="text/javascript">Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Main";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var input = function () {
      var delta = A2(Signal.lift,
      function (t) {
         return t / 20;
      },
      Time.fps(25));
      return A2(Signal.sampleOn,
      delta,
      A3(Signal.lift2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      delta,
      Keyboard.arrows));
   }();
   var render = F2(function (_v0,
   mario) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var verb = _U.cmp(mario.y,
                 0) > 0 ? "jump" : !_U.eq(mario.vx,
                 0) ? "walk" : "stand";
                 var src = _L.append("/imgs/mario/",
                 _L.append(verb,
                 _L.append("/",
                 _L.append(mario.dir,".gif"))));
                 var $ = {ctor: "_Tuple2"
                         ,_0: Basics.toFloat(_v0._0)
                         ,_1: Basics.toFloat(_v0._1)},
                 w = $._0,
                 h = $._1;
                 return A3(Graphics.Collage.collage,
                 _v0._0,
                 _v0._1,
                 _L.fromArray([Graphics.Collage.filled(A3(Color.rgb,
                              174,
                              238,
                              238))(A2(Graphics.Collage.rect,
                              w,
                              h))
                              ,Graphics.Collage.move({ctor: "_Tuple2"
                                                     ,_0: 0
                                                     ,_1: 24 - h / 2})(Graphics.Collage.filled(A3(Color.rgb,
                              74,
                              163,
                              41))(A2(Graphics.Collage.rect,
                              w,
                              50)))
                              ,Graphics.Collage.move({ctor: "_Tuple2"
                                                     ,_0: mario.x
                                                     ,_1: mario.y + 62 - h / 2})(Graphics.Collage.toForm(A3(Graphics.Element.image,
                              35,
                              35,
                              src)))]));
              }();}
         _E.Case($moduleName,
         "between lines 22 and 32");
      }();
   });
   var walk = F2(function (_v4,m) {
      return function () {
         return _U.replace([["vx"
                            ,Basics.toFloat(_v4.x)]
                           ,["dir"
                            ,_U.cmp(_v4.x,
                            0) < 0 ? "left" : _U.cmp(_v4.x,
                            0) > 0 ? "right" : m.dir]],
         m);
      }();
   });
   var physics = F2(function (t,
   m) {
      return _U.replace([["x"
                         ,m.x + t * m.vx]
                        ,["y"
                         ,A2(Basics.max,
                         0,
                         m.y + t * m.vy)]],
      m);
   });
   var gravity = F2(function (t,
   m) {
      return _U.cmp(m.y,
      0) > 0 ? _U.replace([["vy"
                           ,m.vy - t / 4]],
      m) : m;
   });
   var jump = F2(function (_v6,m) {
      return function () {
         return _U.cmp(_v6.y,
         0) > 0 && _U.eq(m.y,
         0) ? _U.replace([["vy",5]],
         m) : m;
      }();
   });
   var step = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2":
            return function ($) {
                 return physics(_v8._0)(walk(_v8._1)(gravity(_v8._0)(jump(_v8._1)($))));
              };}
         _E.Case($moduleName,
         "on line 17, column 16 to 59");
      }();
   };
   var mario = {_: {}
               ,dir: "right"
               ,vx: 0
               ,vy: 0
               ,x: 0
               ,y: 0};
   var main = A3(Signal.lift2,
   render,
   Window.dimensions,
   A3(Signal.foldp,
   step,
   mario,
   input));
   _elm.Main.values = {_op: _op
                      ,mario: mario
                      ,jump: jump
                      ,gravity: gravity
                      ,physics: physics
                      ,walk: walk
                      ,step: step
                      ,render: render
                      ,input: input
                      ,main: main};
   return _elm.Main.values;
};</script></head><body><script type="text/javascript">Elm.fullscreen(Elm.Main)</script><noscript></noscript></body></html>